name: Deploy to EC2

on:
  push:
    branches:
      - main
    paths:
      - client/**
      - server/**
      - ops/**
      - docker-compose.yml
      - .github/workflows/deploy.yml
  workflow_dispatch:

concurrency:
  group: production-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 25

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      REMOTE_DIR: happyhourspot   # ~/happyhourspot on the instance

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Ensure rsync is installed on EC2
        run: |
          ssh -o StrictHostKeyChecking=yes "$EC2_USER@$EC2_HOST" '
            set -euxo pipefail
            if ! command -v rsync >/dev/null 2>&1; then
              (sudo yum -y install rsync) || (sudo apt-get update -y && sudo apt-get install -y rsync)
            fi
          '

      - name: Upload code to EC2 (rsync)
        run: |
          rsync -az --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            --exclude ".env" \
            ./ "$EC2_USER@$EC2_HOST:~/$REMOTE_DIR/"

      - name: Build & start on EC2
        run: |
          ssh "$EC2_USER@$EC2_HOST" '
            set -euxo pipefail
            cd ~/"$REMOTE_DIR"

            echo "== Host info =="; uname -a; whoami; id -nG || true

            # Ensure Docker & Compose exist
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker "$USER" || true
            fi
            if ! docker compose version >/dev/null 2>&1; then
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -SL https://github.com/docker/compose/releases/download/v2.29.7/docker-compose-linux-x86_64 \
                -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi
            docker --version
            docker compose version

            # Warn if top-level .env missing (optional)
            test -f .env && echo ".env found" || echo "::warning title=.env missing::.env not found next to docker-compose.yml"
            # Require server/.env for API env_file (fail fast with clear message)
            if [ ! -f server/.env ]; then
              echo "::error title=server/.env missing::server/.env not found on EC2, required by docker-compose env_file"
              exit 1
            fi

            echo "[1/3] Build images"
            docker compose build --pull --no-cache

            echo "[2/3] Up stack"
            if ! docker compose up -d; then
              echo "Compose up failed; showing service statuses and logs"
              docker compose ps || true
              docker compose logs --no-color --tail=200 || true
              exit 1
            fi

            echo "[3/3] Status"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"

            # If any container is unhealthy, show logs and fail
            UNHEALTHY=$(docker ps --filter "health=unhealthy" --format "{{.Names}}" || true)
            if [ -n "$UNHEALTHY" ]; then
              for n in $UNHEALTHY; do
                echo "---- logs: $n ----"
                docker logs --tail=200 "$n" || true
              done
              exit 1
            fi
          '

      - name: Smoke test on EC2
        run: |
          # Run smoke checks from inside the EC2 host to avoid public ingress issues
          ssh "$EC2_USER@$EC2_HOST" '
            set -euxo pipefail
            # Proxy health (Nginx)
            curl -sSfL http://localhost/healthz >/dev/null
            # Web root should serve index.html
            curl -sSfL http://localhost/ >/dev/null
            # API health: try both with and without /api prefix depending on proxy config
            (curl -sSfL http://localhost/api/health >/dev/null) || (curl -sSfL http://localhost/health >/dev/null) || echo "::warning API health endpoint not found"
          '
